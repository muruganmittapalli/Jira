// ITHR: equipment // 
if(#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Equipment - ICG_IT_End_User_Support";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_End_User_Support";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_End_User_Support"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: concur and badges

if((#{Company == "Vital Source Technologies (01-1168)" || #{Company} == "Verba (01-1168)") && #{Associate Type?} != "Warehouse Temp") 

{
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Concur & Badges - ICG_FS_Offboarding";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_FS_Offboarding";
%subtask%.assignee = "";


string[] groups = {"ICG_FS_Offboarding"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: helpdesk
if(#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Help Desk (Notify Receptionist - ICG_IT_Help_Desk)";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Help_Desk";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Help_Desk"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: hipchat
if(#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") {
string issueType="HR Offboarding Sub-task";
string issueSummary="HipChat/Zoom/ATT Teleconference - ICG_IT_Communications";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Communications";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Communications"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: kronos timeclocks
if(#{Associate Type?} == "Employee") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: ICG_IT_Kronos_Timeclocks";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Kronos_Timeclocks";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Kronos_Timeclocks"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: messaging and security
if(#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: ICG_IT_Messaging_&_Security";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Messaging_&_Security";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Messaging_&_Security"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: telecom
if(#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: ICG_IT_Telecom";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Telecom";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Telecom"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: TOC
if (#{TOC Number} != "none") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: TOC";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Order_Management_Systems";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Order_Management_Systems"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: data center access
if((#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") && #{Street Address} == "1 Ingram Blvd. La Vergne, TN USA") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Remove Data Center Access";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Help_Desk";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Help_Desk"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: lsi engineering
if((#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") && #{Company} == "Lightning Source") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: ICG_IT_LSI_Engineering";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_LSI_Engineering";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_LSI_Engineering"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: lsi general
if((#{Associate Type?} == "Employee" || #{Associate Type?} == "Contractor") && #{Company} == "Lightning Source") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: ICG_IT_LSI_General";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_LSI_General";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_LSI_General"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: IPS Jackson 
if(#{Company} == "IPS Jackson (35)") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: ICG_IT_IPS Jackson ";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_IPS Jackson ";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_IPS Jackson "};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: (Connect now called Manage) - Github and Manage
if(#{Company} == "Vital Source Technologies" || #{Company} == "Verba") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Manage - Andrew Parker";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "";
%subtask%.assignee = "aparker";

sendEmail("aparker", "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: Equipment VST 
if(#{Company} == "Vital Source Technologies" || #{Company} == "Verba") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Equipment - ICG_IT_End_User_Support";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_End_User_Support";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_End_User_Support"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: vst it infrastructure
if(#{Company} == "Vital Source Technologies" || #{Company} == "Verba") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: VST_IT_Infrastructure";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "VST_IT_Infrastructure";
%subtask%.assignee = "";

string[] groups = {"VST_IT_Infrastructure"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: universal
if(#{Company} == "Vital Source Technologies" || #{Company} == "Verba") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Universal";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "VST_Offboarding";
%subtask%.assignee = "";

string[] groups = {"VST_Offboarding"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: adobe licenses
if(#{Company} == "Vital Source Technologies" || #{Company} == "Verba") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Adobe Creative Cloud License";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "VST_Offboarding";
%subtask%.assignee = "";

string[] groups = {"VST_Offboarding"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: github, platform and third party apps
if(#{Company} == "Vital Source Technologies" || #{Company} == "Verba") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Github, Platform & Third Party Apps";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "VST_Offboarding";
%subtask%.assignee = "";

string[] groups = {"VST_Offboarding"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: keys and cards
if(#{Company} == "Vital Source Technologies" || #{Company} == "Verba") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Keys and Cards - VST_Offboarding";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "VST_Offboarding";
%subtask%.assignee = "";

string[] groups = {"VST_Offboarding"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}

// ITHR: warehouse
if(#{Associate Type?} == "Warehouse Temp") {
string issueType="HR Offboarding Sub-task";
string issueSummary="Termination: Warehouse - ICG_IT_Messaging_&_Security";
string subtask = cloneIssueToSubtask(key, issueType, issueSummary);
%subtask%.AssignmentGroup = "ICG_IT_Messaging_&_Security";
%subtask%.assignee = "";

string[] groups = {"ICG_IT_Messaging_&_Security"};
string[] usersByGroups;
usersByGroups = usersInGroups(groups);

sendEmail(usersByGroups, "A termination issue has been created in ITHR", "Termination Issue Created: https://tickets.ingramcontent.com/browse/" + %subtask%.key);
}


//Transition shown only if all subtasks of this issue are resolved

string[] subtasks = subtasks(key);
for(string subtask in subtasks) {
    if(%subtask%.status != "Closed") {
       return false;
    }
}


// When messaging_and_security Onboarding Sub-Task is resolved, create iKnow New user Onboarding Sub-Task"



if(#{Associate Type?} == "Contractor" 
      && issueType == "Onboarding Sub-Task"
      && contains(summary, "Messaging & security new user onboarding")) {
    string issueSummary="iKnow New User"+ substring(summary, 41, -1);
    string subtask = cloneIssueToSubtask(parent, "Onboarding Sub-Task", issueSummary);
    %subtask%.AssignmentGroup = "ICG_IT_SharePoint_&_Websites";
    %subtask%.assignee = "unassigned";
    %subtask%.watchers = "";
}


// After Resloving the sub tasks parent status in Pending start status 
if(isNotNull(parent)) {
	boolean allResolved = true;
	for(string task in subtasks(parent)){
		allResolved = allResolved && isNotNull(%task%.resolution);
	}
	if(allResolved) {
		autotransition(71, parent);//801 Resolved
	}
}

--------------------------------------------------------------------------------------------------------------------------